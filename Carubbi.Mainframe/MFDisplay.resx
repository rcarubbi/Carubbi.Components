<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="objXMFDisplay.OcxState" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj0yLjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACFTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5BeEhvc3QrU3RhdGUBAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAtQ8AAAIB
        AAAAAQAAAAApAAAAQ29weXJpZ2h0IChjKSAxOTk1IFdhbGwgRGF0YSBJbmNvcnBvcmF0ZWQAAAAAdw8A
        AOABAABAAQAAXAAAAEMAOgBcAEQATwBDAFUATQBFAH4AMQBcAGUAZABpAG4AdgBlAG4AXABDAE8ATgBG
        AEkARwB+ADEAXABUAGUAbQBwAFwAfgBEAEYAMwBGAEMAMAAuAHQAbQBwAAAASAAAADDMCBYBAAAAAAAA
        AAAAAAAwhVmsfrTOATIZSkN+tM4BMhlKQ360zgESAAAAAAAAACOFhZG1h84RoLYIAAlaBcMAAAAAAAAA
        AAoAAABHAEQARABNAAAASAAAAHBvERYCAAAADAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFZlY3RvcgAALQAxAC0ANQAtADIAMQAtADEAMAA5
        ADcANAA5ADEAMQA2ADAALQA3ADMAMAAyADAANwA3ADEAMgAtADEAMwAxADgANwAyADUAOAA4ADUALQAy
        ADUAMQAxADAAMwBfAEMAbABhAHMAcwBlAHMAXABDAEwAUwBJAEQAXAB7AEEARgBCAEIAMgA5ADEAQQAt
        ADYARAA0AEYALQAxADEAQwBGAC0AQQBBADgAOQAtADAAOAAwADAAMAA5ADEAQQAxADYARQAyAH0AXABU
        AHIAZQBhAHQAQQBzAAAAAQAAAAAAAAAAAAAAAAAAAP////8GAGwAAAAAAAAAAACQAQD/FwAAAAAAAAAO
        AAAAQwBvAGwAbwByAHMAAABIAAAAcG8RFgIAAABkAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP8AAP///wAA/wAA/wAAAAAA/wD///8AAAD/
        AP8AAAD/AP8AAP8AAAD//wD//wAA////AAAAAAJCAEEAXABzAHkAcwB0AGUAbQBcAFcARABLAGIAZAAu
        AEQAbABsAAAAEYDx/W4ACP8iAG8AZgB0CAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdQBt
        APce9e8AAAj/LwAAAAAAAADhg/H9XAAI/zIAYwByAG8ITQBpAGMAcgBvAHMAbwBmAHQALgBPAGYAZgBp
        AGMAZQAuAEIAdQBzAGkAbgBlAHMAcwBBAHAAcABsAGkAYwBhAHQAaQBvAG4AcwAuAFMAeQBuAGMAUwBl
        AOYe9e9pAAj/PgBzAC4ASQBuAHQAbAB0APGD8f0OAAAAQwB1AHIAcwBvAHIAAABIAAAAcG8RFgIAAAAM
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAOgDAAABAAAADgAAAEUAbQAzADIANwA5AAAASAAAAHBvERYCAAAAPAEAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADOBAAOgDAgA8
        VGVybTMyNzA+LDMsMTIsMjcsLTIwLDAsMjcsMTIsMCwwLDQwMCwwLDAsMCwwLDAsMCwyLDQ5AAAAAAAA
        AAAAAABTAHQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AGMAQQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUwB0
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAByAG8AAAAA
        AAAAAAAAAAAAAAAAAAAAGFAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAOAAAAUwBjAHIAaQBwAHQAAABIAAAAcG8RFgIAAAAQAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCJk3dgyVAJYMmVGQe2SZIAtkuX
        AAYAtOkSANzoEgD/////xOkSACDpkHxgAJF8/////10AkXz2SOd5AAAWAAAAAAAAAAAAGPARFmDqEgAB
        AAAAAAAAAP//AP8AABYAvOcSAPyDNnoM6hIAIOmQfOABkXz/////2wGRfMxH53kAABYAAAAAAOtH53n9
        cL2+qOoSAAEAAAAAAAAAIOoSALiV53kAAAMAVOoSAMS6NXr/////60fneUpI53kAABYAAAAAAGwBAABg
        6hIAWuXneRjwERZ35ed5hXC9vqjqEgABAAAAAAAAAGUAPQBuAGUAdQB0AHIAYQBsACwAIABQAHUAYgAA
        AAAAAABLAGUAeQBUAG8AawBlAG4APQBiADAAMwBmADUAZgA3AGYAMQAxAGQANQAwAGEAMwBhAF0AXQAs
        ACAATQBpAGMAcgBvAHMAbwBmAHQALgBWAGkAcwB1AGEAbABTAHQAdQBkAGkAbwAuAFcAaQBuAGQAbwB3
        AHMALgBGAG8AcgBtAHMALAAgAFYAZQByAHMAaQBvAG4APQA5AC4AMAAuADAALgAwACwAIABDAHUAbAB0
        AHUAcgBlAD0AbgBlAHUAdAByAGEAbAAsACAAUAB1AGIAbABpAGMASwBlAHkAVABvAGsAZQBuAD0AYgAw
        ADMAZgA1AGYANwBmADEAMQBkADUAMAAAAAAAEAAAAEMAbwB1AG4AdAByAHkAAABIAAAAcG8RFgIAAAAE
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAIQBEABIAAAABAEMAbwBtAHAATwBiAGoAAABIAAAAQCoGFgIAAAB7AAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQD+/wMKAAD/////I4WF
        kbWHzhGgtggACVoFwxMAAABSdW1iYSBIb3N0IFByb2ZpbGUAEwAAAFJ1bWJhIEhvc3QgUHJvZmlsZQAd
        AAAAV2FsbERhdGEuTWFpbmZyYW1lRGlzcGxheS4xMgD0ObJxAAAAAAAAAAAAAAAAEgAAAEsAZQB5AGIA
        bwBhAHIAZAAAAEgAAABAKgYWAgAAAAgBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAb+AAAdQBpAHYAbwBzACAAZABlACAAcAByAG8AZwByAGEA
        bQBhAHMALwBNAGkAYwByAG8AcwBvAGYAdAAgAFYAaQBzAHUAYQBsACAAUwB0AHUAZABpAG8AIAA5AC4A
        MAAvAEMAbwBtAG0AbwBuADcALwBJAEQARQAvAE0AaQBjAHIAbwBzAG8AZgB0AC4AVgBpAHMAdQBhAGwA
        UwB0AHUAZABpAG8ALgBEAGEAdABhAFQAbwBvAGwAcwAvAE0AaQBjAHIAbwBzAG8AZgB0AC4AVgBpAHMA
        dQBhAGwAUwB0AHUAZABpAG8ALgBEAGEAdABhAFQAbwBvAGwAcwAuAEUAWABFAAAAYQAUAAAASQBuAHQA
        ZQByAGYAYQBjAGUAAABIAAAAQCoGFgIAAAAcAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABSAFwAUwAtADEALQA1AP//AAAAAAAAAAAwADkA
        NwA0ADkAMQAxADYAMAAtADcAMwAwADIAMAA3ADcAMQAyAC0AMQAzADEAOAA3ADIANQA4ADgANQAtADIA
        NQAxADEAMAAzAF8AQwBsAGEAcwBzAGUAcwBcAEMATABTAEkARABcAHsAQQBGAEIAQgAyADkAMQBBAC0A
        NgBEADQARgAtADEAMQBDAEYALQBBAEEAOAA5AC0AMAA4ADAAMAAwADkAMQBBADEANgBFADIAfQBcAEwA
        bwBjAGEAbABTAGUAcgB2AGUAcgAAADIAAAA4ADYAAABlAHUAdAByAGEAbAAAAB2/dv4AAAr/IgAAAAEA
        AAhuAGUAdQB0AHIAYQAUAAAAVwBhAHQAZQByAG0AYQByAGsAAABIAAAAQCoGFgIAAAAQAQAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAABpAG8AbgA9ADIALgAwAC4AMAAuADAALAAgAEMAdQBsAHQAdQByAGUAPQBuAGUAdQB0AHIA
        YQBsACwAIABQAHUAYgBsAGkAYwBLAGUAeQBUAG8AawBlAG4APQBiADAAMwBmADUAZgA3AGYAMQAxAGQA
        NQAwAGEAMwBhAAAAAAA0AGUAMAA4ADkAAABEAEQANAAtADEAMQBDAEUALQA5AEEANwBEAC0AMAA4ADAA
        MAAwADkAMABCADIAOAA5ADcAfQBcAFQAcgBlAGEAdABBAHMAAAAAAGUAPgAnAEkAVgBSAHcAZwBlAEsA
        UQBAAHcAagA3ADMAUABBAF0AMwB7AFMAAAAYAAAAUQB1AGUAcgB5ACAAUgBlAHAAbAB5AAAASAAAAEAq
        BhYCAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAABwAAABDAGgAYQByAGEAYwB0AGUAcgAgAFMA
        ZQB0AAAASAAAAHhSBhYCAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAACAARAAiAAAAQwBsAGkAcABiAG8AYQByAGQAIABvAGIAagBlAGMA
        dAAAAEgAAACA1gcWAgAAACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        Cw==
</value>
  </data>
</root>